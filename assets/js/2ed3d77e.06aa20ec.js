"use strict";(self.webpackChunkeverscale_docs_website=self.webpackChunkeverscale_docs_website||[]).push([[8217],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8660:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),i=["components"],l={sidebar_position:2},c="Samples",s={unversionedId:"develop/smart-contract/cpp-developing/samples",id:"develop/smart-contract/cpp-developing/samples",title:"Samples",description:"Testing in the network is somewhat similar to testing locally, but instead of the linker tonos-cli needs to be used and argument passing is a bit different. The deploying workflow is described in README but we will repeat it once again here. First, we need to recompile the contract since we used for linker tests. Then copy newly generated tvc file (and rename it to HelloWorld.tvc for simplicity) and abi file to",source:"@site/../../src/develop/smart-contract/cpp-developing/samples.md",sourceDirName:"develop/smart-contract/cpp-developing",slug:"/develop/smart-contract/cpp-developing/samples",permalink:"/develop/smart-contract/cpp-developing/samples",draft:!1,editUrl:"https://github.com/everscale-org/docs/edit/main/.build/website/../../src/develop/smart-contract/cpp-developing/samples.md",tags:[],version:"current",lastUpdatedAt:1661343074,formattedLastUpdatedAt:"Aug 24, 2022",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"C/C++ Compiler",permalink:"/develop/smart-contract/cpp-developing/compiler"},next:{title:"DeBots",permalink:"/smart-contract/debots"}},p={},d=[],u={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"samples"},"Samples"),(0,a.kt)("p",null,"Testing in the network is somewhat similar to testing locally, but instead of the linker tonos-cli needs to be used and argument passing is a bit different. The deploying workflow is described in README but we will repeat it once again here. First, we need to recompile the contract since we used for linker tests. Then copy newly generated tvc file (and rename it to HelloWorld.tvc for simplicity) and abi file to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    tonos-cli/target/<debug or release>/ \n    \n")),(0,a.kt)("p",null," After all the preparations, we can execute the following script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd tonos-cli/target/<debug or release>/\ncargo run genaddr HelloWorld.tvc HelloWorld.abi --genkey hw.key\n")),(0,a.kt)("p",null,"The latter command returns the raw address of the contract. Now you can send (test) coins to it using any method described in README. When contract balance is greater than 0, we can deploy the contract:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cargo run deploy --abi HelloWorld.abi HelloWorld.tvc '{}' --sign hw.key\n")),(0,a.kt)("p",null,"And finally test hello_world method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'cargo run call \u2013abi HelloWorld.abi "<raw address>" hello_world "{}" --sign hw.key\n')),(0,a.kt)("p",null,"The command is supposed to output the message ending with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Succeded.\nResult = {"output":{"value0":"0x2a"}}\n')))}m.isMDXComponent=!0}}]);